// Generated by the RPC compiler. DO NOT EDIT.


import { app } from "@/globals";
import { fetchAssessmentSubmissions } from "@/handlers/fetchAssessmentSubmissions";
import { incrementThreadView } from "@/handlers/incrementThreadView";
import { ping } from "@/handlers/ping";
import { getAnnouncements } from "@/handlers/getAnnouncements";
import { fetchSubmission } from "@/handlers/fetchSubmission";
import { submitAssignment } from "@/handlers/submitAssignment";
import { forgotPassword } from "@/handlers/forgotPassword";
import { createBook } from "@/handlers/createBook";
import { addScheduleClass } from "@/handlers/addScheduleClass";
import { getForumByCourseID } from "@/handlers/getForumByCourseID";
import { updateBook } from "@/handlers/updateBook";
import { login } from "@/handlers/login";
import { fetchAssessments } from "@/handlers/fetchAssessments";
import { resetPassword } from "@/handlers/resetPassword";
import { toggleLikePost } from "@/handlers/toggleLikePost";
import { getCourses } from "@/handlers/getCourses";
import { deleteBook } from "@/handlers/deleteBook";
import { upsertThread } from "@/handlers/upsertThread";
import { verifyEmail } from "@/handlers/verifyEmail";
import { getFeatured } from "@/handlers/getFeatured";
import { getCourseBook } from "@/handlers/getCourseBook";
import { fetchAssessmentDetailsTeacher } from "@/handlers/fetchAssessmentDetailsTeacher";
import { getCourseEvents } from "@/handlers/getCourseEvents";
import { getUserCourses } from "@/handlers/getUserCourses";
import { createDriveFolder } from "@/handlers/createDriveFolder";
import { getThreads } from "@/handlers/getThreads";
import { assignmentGradeSubmission } from "@/handlers/assignmentGradeSubmission";
import { getRoleInCourse } from "@/handlers/getRoleInCourse";
import { upsertPost } from "@/handlers/upsertPost";
import { removeMemberFromCourse } from "@/handlers/removeMemberFromCourse";
import { addDriveItem } from "@/handlers/addDriveItem";
import { joinCourse } from "@/handlers/joinCourse";
import { getUserInfoByIDs } from "@/handlers/getUserInfoByIDs";
import { fetchStudentSubmission } from "@/handlers/fetchStudentSubmission";
import { deletePost } from "@/handlers/deletePost";
import { createCourseInvitation } from "@/handlers/createCourseInvitation";
import { setUserProfile } from "@/handlers/setUserProfile";
import { getCourseMembers } from "@/handlers/getCourseMembers";
import { fetchUserSevenDayActivity } from "@/handlers/fetchUserSevenDayActivity";
import { createAssessment } from "@/handlers/createAssessment";
import { getBooksByCourse } from "@/handlers/getBooksByCourse";
import { fetchAssessmentDetailsStudent } from "@/handlers/fetchAssessmentDetailsStudent";
import { submitAnswers } from "@/handlers/submitAnswers";
import { getDriveFolder } from "@/handlers/getDriveFolder";
import { getForumByID } from "@/handlers/getForumByID";
import { getUserInfoByID } from "@/handlers/getUserInfoByID";
import { createCourse } from "@/handlers/createCourse";
import { leaveCourse } from "@/handlers/leaveCourse";
import { getUserInfo } from "@/handlers/getUserInfo";
import { register } from "@/handlers/register";
import { manualGradeSubmission } from "@/handlers/manualGradeSubmission";
import { getUserEvents } from "@/handlers/getUserEvents";
import { verifyForgotPassword } from "@/handlers/verifyForgotPassword";
import { fetchUserStats } from "@/handlers/fetchUserStats";
import { getThreadAndPostStats } from "@/handlers/getThreadAndPostStats";
import { deleteThread } from "@/handlers/deleteThread";
import { checkEmail } from "@/handlers/checkEmail";
import { updateCourse } from "@/handlers/updateCourse";
//////////////////////////////
// Types defined in the types file
//////////////////////////////

export interface User {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
    avatar?: string;
    gender?: string;
    title?: string;
    bio?: string;
}

export type Token = string;

export interface Featured {
    background: string;
    title: string;
    description: string;
}

export interface Assessment {
    id: string;
    title: string;
    description?: string;
    courseId: string;
    startDate?: string;
    dueDate?: string;
    type: string;
    questions: Question[];
    submissions: Submission[];
    totalPoints?: number;
}

export interface Question {
    id: string;
    assessmentId: string;
    title: string;
    type: string;
    options?: any;
    answer?: string;
    points: number;
}

export interface NewQuestion {
    title: string;
    type: string;
    options?: any;
    answer?: string;
    points: number;
}

export interface Submission {
    id: string;
    assessmentId: string;
    studentId: string;
    submittedAt?: string;
    assignmentContent?: any;
    answers?: any;
    feedback?: string;
    grade?: number;
    isMarked: boolean;
}

export interface Course {
    id: string;
    name: string;
    code?: string;
    description?: string;
    imageURL?: string;
    createdBy: User;
    createdAt: number;
}

export interface UserStats {
    coursesInProgress: number;
    coursesCompleted: number;
    tasksFinished: number;
}

export interface UserSevenDayActivity {
    activities: number[];
}

export interface CourseMembership {
    userId: string;
    courseId: string;
    role: string;
    createdAt: number;
}

export interface Forum {
    id: string;
    courseID: string;
    name: string;
    createdAt: number;
    createdBy?: User;
}

export interface Thread {
    id: string;
    forumID: string;
    createdAt: number;
    updatedAt: number;
    createdBy?: User;
    deletedAt?: number;
    title: string;
    posts: Post[];
    isAnnouncement: boolean;
}

export interface ThreadStats {
    threadID: string;
    views: number;
}

export interface PostStats {
    postID: string;
    likes: number;
    liked: boolean;
}

export interface Post {
    id: string;
    threadID: string;
    createdAt: number;
    updatedAt: number;
    createdBy?: User;
    deletedAt?: number;
    content: any;
}

export interface Event {
    name: string;
    time: string;
    type: string;
    url: string;
}

export interface ScheduleClass {
    courseID: string;
    startDate: string;
    classType: string;
    classLink: string;
}

export interface DriveItem {
    id: string;
    url: string;
    name: string;
}

export interface DriveFolderInfo {
    id: string;
    name: string;
}

export interface DriveFolder {
    parentFolderId?: string;
    id: string;
    name: string;
    items: (DriveFolderInfo | DriveItem)[];
}

export interface CourseBook {
    id: string;
    title: string;
    parentID?: string;
    childrenIDs?: string[];
    content?: any;
    course?: Course;
    parent?: CourseBook;
    children?: CourseBook[];
}

//////////////////////////////
// Endpoint Requests/Responses
//////////////////////////////


// PingRequest is the request that is sent to the ping endpoint.
export interface PingRequest {
    seq: number;
}

// PingResponse is the response that is sent to the ping endpoint.
export interface PingResponse {
    seq: number;
}

// CheckEmailRequest is the request that is sent to the checkEmail endpoint.
export interface CheckEmailRequest {
    email: string;
}

// CheckEmailResponse is the response that is sent to the checkEmail endpoint.
export interface CheckEmailResponse {
    taken: boolean;
}

// RegisterRequest is the request that is sent to the register endpoint.
export interface RegisterRequest {
    email: string;
    password: string;
    firstName: string;
    lastName: string;
    otp: string;
}

// RegisterResponse is the response that is sent to the register endpoint.
export interface RegisterResponse {

}

// VerifyEmailRequest is the request that is sent to the verifyEmail endpoint.
export interface VerifyEmailRequest {
    email: string;
}

// VerifyEmailResponse is the response that is sent to the verifyEmail endpoint.
export interface VerifyEmailResponse {

}

// LoginRequest is the request that is sent to the login endpoint.
export interface LoginRequest {
    email: string;
    password: string;
}

// LoginResponse is the response that is sent to the login endpoint.
export interface LoginResponse {
    user: User;
    token: Token;
}

// VerifyForgotPasswordRequest is the request that is sent to the verifyForgotPassword endpoint.
export interface VerifyForgotPasswordRequest {
    email: string;
}

// VerifyForgotPasswordResponse is the response that is sent to the verifyForgotPassword endpoint.
export interface VerifyForgotPasswordResponse {

}

// ForgotPasswordRequest is the request that is sent to the forgotPassword endpoint.
export interface ForgotPasswordRequest {
    email: string;
    newPassword: string;
    otp: string;
}

// ForgotPasswordResponse is the response that is sent to the forgotPassword endpoint.
export interface ForgotPasswordResponse {

}

// GetFeaturedRequest is the request that is sent to the getFeatured endpoint.
export interface GetFeaturedRequest {

}

// GetFeaturedResponse is the response that is sent to the getFeatured endpoint.
export interface GetFeaturedResponse {
    featured: Featured;
}

// GetUserInfoRequest is the request that is sent to the getUserInfo endpoint.
export interface GetUserInfoRequest {
    email?: string;
}

// GetUserInfoResponse is the response that is sent to the getUserInfo endpoint.
export interface GetUserInfoResponse {
    user: User;
}

// GetUserInfoByIDRequest is the request that is sent to the getUserInfoByID endpoint.
export interface GetUserInfoByIDRequest {
    id: string;
}

// GetUserInfoByIDResponse is the response that is sent to the getUserInfoByID endpoint.
export interface GetUserInfoByIDResponse {
    user: User;
}

// GetUserInfoByIDsRequest is the request that is sent to the getUserInfoByIDs endpoint.
export interface GetUserInfoByIDsRequest {
    ids: string[];
}

// GetUserInfoByIDsResponse is the response that is sent to the getUserInfoByIDs endpoint.
export interface GetUserInfoByIDsResponse {
    users: Record<string, User>;
}

// SetUserProfileRequest is the request that is sent to the setUserProfile endpoint.
export interface SetUserProfileRequest {
    user: User;
}

// SetUserProfileResponse is the response that is sent to the setUserProfile endpoint.
export interface SetUserProfileResponse {

}

// ResetPasswordRequest is the request that is sent to the resetPassword endpoint.
export interface ResetPasswordRequest {
    password: string;
    newPassword: string;
}

// ResetPasswordResponse is the response that is sent to the resetPassword endpoint.
export interface ResetPasswordResponse {

}

// CreateAssessmentRequest is the request that is sent to the createAssessment endpoint.
export interface CreateAssessmentRequest {
    title: string;
    description?: string;
    courseId: string;
    startDate?: string;
    dueDate?: string;
    type: string;
    questions?: NewQuestion[];
}

// CreateAssessmentResponse is the response that is sent to the createAssessment endpoint.
export interface CreateAssessmentResponse {
    assessment: Assessment;
}

// SubmitAnswersRequest is the request that is sent to the submitAnswers endpoint.
export interface SubmitAnswersRequest {
    assessmentId: string;
    answers: any;
}

// SubmitAnswersResponse is the response that is sent to the submitAnswers endpoint.
export interface SubmitAnswersResponse {
    submission: Submission;
}

// SubmitAssignmentRequest is the request that is sent to the submitAssignment endpoint.
export interface SubmitAssignmentRequest {
    assessmentId: string;
    assignmentContent: any;
}

// SubmitAssignmentResponse is the response that is sent to the submitAssignment endpoint.
export interface SubmitAssignmentResponse {
    submission: Submission;
}

// ManualGradeSubmissionRequest is the request that is sent to the manualGradeSubmission endpoint.
export interface ManualGradeSubmissionRequest {
    submissionId: string;
    saqGrades: number;
}

// ManualGradeSubmissionResponse is the response that is sent to the manualGradeSubmission endpoint.
export interface ManualGradeSubmissionResponse {
    submission: Submission;
}

// AssignmentGradeSubmissionRequest is the request that is sent to the assignmentGradeSubmission endpoint.
export interface AssignmentGradeSubmissionRequest {
    submissionId: string;
    grades: number;
    feedback: string;
}

// AssignmentGradeSubmissionResponse is the response that is sent to the assignmentGradeSubmission endpoint.
export interface AssignmentGradeSubmissionResponse {
    submission: Submission;
}

// FetchAssessmentDetailsTeacherRequest is the request that is sent to the fetchAssessmentDetailsTeacher endpoint.
export interface FetchAssessmentDetailsTeacherRequest {
    assessmentId: string;
}

// FetchAssessmentDetailsTeacherResponse is the response that is sent to the fetchAssessmentDetailsTeacher endpoint.
export interface FetchAssessmentDetailsTeacherResponse {
    assessment: Assessment;
}

// FetchAssessmentDetailsStudentRequest is the request that is sent to the fetchAssessmentDetailsStudent endpoint.
export interface FetchAssessmentDetailsStudentRequest {
    assessmentId: string;
}

// FetchAssessmentDetailsStudentResponse is the response that is sent to the fetchAssessmentDetailsStudent endpoint.
export interface FetchAssessmentDetailsStudentResponse {
    assessment: Assessment;
}

// FetchAssessmentSubmissionsRequest is the request that is sent to the fetchAssessmentSubmissions endpoint.
export interface FetchAssessmentSubmissionsRequest {
    assessmentId: string;
}

// FetchAssessmentSubmissionsResponse is the response that is sent to the fetchAssessmentSubmissions endpoint.
export interface FetchAssessmentSubmissionsResponse {
    submissions: Submission[];
}

// FetchSubmissionRequest is the request that is sent to the fetchSubmission endpoint.
export interface FetchSubmissionRequest {
    submissionId: string;
}

// FetchSubmissionResponse is the response that is sent to the fetchSubmission endpoint.
export interface FetchSubmissionResponse {
    submission: Submission;
}

// FetchAssessmentsRequest is the request that is sent to the fetchAssessments endpoint.
export interface FetchAssessmentsRequest {
    courseId: string;
}

// FetchAssessmentsResponse is the response that is sent to the fetchAssessments endpoint.
export interface FetchAssessmentsResponse {
    assessments: Assessment[];
}

// FetchStudentSubmissionRequest is the request that is sent to the fetchStudentSubmission endpoint.
export interface FetchStudentSubmissionRequest {

}

// FetchStudentSubmissionResponse is the response that is sent to the fetchStudentSubmission endpoint.
export interface FetchStudentSubmissionResponse {
    submissions: Submission[];
}

// FetchUserStatsRequest is the request that is sent to the fetchUserStats endpoint.
export interface FetchUserStatsRequest {

}

// FetchUserStatsResponse is the response that is sent to the fetchUserStats endpoint.
export interface FetchUserStatsResponse {
    stats: UserStats;
}

// FetchUserSevenDayActivityRequest is the request that is sent to the fetchUserSevenDayActivity endpoint.
export interface FetchUserSevenDayActivityRequest {

}

// FetchUserSevenDayActivityResponse is the response that is sent to the fetchUserSevenDayActivity endpoint.
export interface FetchUserSevenDayActivityResponse {
    activity: UserSevenDayActivity;
}

// CreateCourseRequest is the request that is sent to the createCourse endpoint.
export interface CreateCourseRequest {
    name: string;
    description: string;
    code?: string;
    imageURL?: string;
}

// CreateCourseResponse is the response that is sent to the createCourse endpoint.
export interface CreateCourseResponse {
    course: Course;
}

// UpdateCourseRequest is the request that is sent to the updateCourse endpoint.
export interface UpdateCourseRequest {
    id: string;
    name: string;
    description: string;
    code?: string;
    imageURL?: string;
}

// UpdateCourseResponse is the response that is sent to the updateCourse endpoint.
export interface UpdateCourseResponse {
    course: Course;
}

// GetCoursesRequest is the request that is sent to the getCourses endpoint.
export interface GetCoursesRequest {
    courseIds: string[];
}

// GetCoursesResponse is the response that is sent to the getCourses endpoint.
export interface GetCoursesResponse {
    courses: Course[];
}

// GetUserCoursesRequest is the request that is sent to the getUserCourses endpoint.
export interface GetUserCoursesRequest {

}

// GetUserCoursesResponse is the response that is sent to the getUserCourses endpoint.
export interface GetUserCoursesResponse {
    courses: Course[];
    memberships: CourseMembership[];
}

// CreateCourseInvitationRequest is the request that is sent to the createCourseInvitation endpoint.
export interface CreateCourseInvitationRequest {
    courseId: string;
    role: string;
}

// CreateCourseInvitationResponse is the response that is sent to the createCourseInvitation endpoint.
export interface CreateCourseInvitationResponse {
    code: string;
}

// JoinCourseRequest is the request that is sent to the joinCourse endpoint.
export interface JoinCourseRequest {
    code: string;
}

// JoinCourseResponse is the response that is sent to the joinCourse endpoint.
export interface JoinCourseResponse {
    course: Course;
}

// LeaveCourseRequest is the request that is sent to the leaveCourse endpoint.
export interface LeaveCourseRequest {
    courseId: string;
}

// LeaveCourseResponse is the response that is sent to the leaveCourse endpoint.
export interface LeaveCourseResponse {

}

// RemoveMemberFromCourseRequest is the request that is sent to the removeMemberFromCourse endpoint.
export interface RemoveMemberFromCourseRequest {
    userID: string;
    courseID: string;
}

// RemoveMemberFromCourseResponse is the response that is sent to the removeMemberFromCourse endpoint.
export interface RemoveMemberFromCourseResponse {

}

// GetForumByCourseIDRequest is the request that is sent to the getForumByCourseID endpoint.
export interface GetForumByCourseIDRequest {
    courseID: string;
}

// GetForumByCourseIDResponse is the response that is sent to the getForumByCourseID endpoint.
export interface GetForumByCourseIDResponse {
    forum: Forum;
}

// GetForumByIDRequest is the request that is sent to the getForumByID endpoint.
export interface GetForumByIDRequest {
    id: string;
}

// GetForumByIDResponse is the response that is sent to the getForumByID endpoint.
export interface GetForumByIDResponse {
    forum: Forum;
}

// GetThreadsRequest is the request that is sent to the getThreads endpoint.
export interface GetThreadsRequest {
    forumID: string;
}

// GetThreadsResponse is the response that is sent to the getThreads endpoint.
export interface GetThreadsResponse {
    threads: Thread[];
}

// UpsertThreadRequest is the request that is sent to the upsertThread endpoint.
export interface UpsertThreadRequest {
    thread: Thread;
}

// UpsertThreadResponse is the response that is sent to the upsertThread endpoint.
export interface UpsertThreadResponse {
    thread: Thread;
}

// DeleteThreadRequest is the request that is sent to the deleteThread endpoint.
export interface DeleteThreadRequest {
    threadID: string;
}

// DeleteThreadResponse is the response that is sent to the deleteThread endpoint.
export interface DeleteThreadResponse {

}

// UpsertPostRequest is the request that is sent to the upsertPost endpoint.
export interface UpsertPostRequest {
    post: Post;
}

// UpsertPostResponse is the response that is sent to the upsertPost endpoint.
export interface UpsertPostResponse {
    post: Post;
}

// DeletePostRequest is the request that is sent to the deletePost endpoint.
export interface DeletePostRequest {
    postID: string;
}

// DeletePostResponse is the response that is sent to the deletePost endpoint.
export interface DeletePostResponse {

}

// GetRoleInCourseRequest is the request that is sent to the getRoleInCourse endpoint.
export interface GetRoleInCourseRequest {
    courseId: string;
}

// GetRoleInCourseResponse is the response that is sent to the getRoleInCourse endpoint.
export interface GetRoleInCourseResponse {
    role: string | null;
}

// GetThreadAndPostStatsRequest is the request that is sent to the getThreadAndPostStats endpoint.
export interface GetThreadAndPostStatsRequest {
    threadID: string;
}

// GetThreadAndPostStatsResponse is the response that is sent to the getThreadAndPostStats endpoint.
export interface GetThreadAndPostStatsResponse {
    thread: ThreadStats;
    posts: Record<string, PostStats>;
}

// ToggleLikePostRequest is the request that is sent to the toggleLikePost endpoint.
export interface ToggleLikePostRequest {
    postID: string;
}

// ToggleLikePostResponse is the response that is sent to the toggleLikePost endpoint.
export interface ToggleLikePostResponse {

}

// IncrementThreadViewRequest is the request that is sent to the incrementThreadView endpoint.
export interface IncrementThreadViewRequest {
    threadID: string;
}

// IncrementThreadViewResponse is the response that is sent to the incrementThreadView endpoint.
export interface IncrementThreadViewResponse {

}

// GetUserEventsRequest is the request that is sent to the getUserEvents endpoint.
export interface GetUserEventsRequest {

}

// GetUserEventsResponse is the response that is sent to the getUserEvents endpoint.
export interface GetUserEventsResponse {
    events: Record<string, Event[]>;
}

// GetCourseEventsRequest is the request that is sent to the getCourseEvents endpoint.
export interface GetCourseEventsRequest {
    courseId: string;
}

// GetCourseEventsResponse is the response that is sent to the getCourseEvents endpoint.
export interface GetCourseEventsResponse {
    events: Record<string, Event[]>;
}

// GetAnnouncementsRequest is the request that is sent to the getAnnouncements endpoint.
export interface GetAnnouncementsRequest {
    courseIDs?: string[];
}

// GetAnnouncementsResponse is the response that is sent to the getAnnouncements endpoint.
export interface GetAnnouncementsResponse {
    threads: Thread[];
    threadToCourse: Record<string, Course>;
}

// GetCourseMembersRequest is the request that is sent to the getCourseMembers endpoint.
export interface GetCourseMembersRequest {
    courseID: string;
}

// GetCourseMembersResponse is the response that is sent to the getCourseMembers endpoint.
export interface GetCourseMembersResponse {
    users: User[];
    memberships: CourseMembership[];
}

// AddScheduleClassRequest is the request that is sent to the addScheduleClass endpoint.
export interface AddScheduleClassRequest {
    scheduleClass: ScheduleClass;
}

// AddScheduleClassResponse is the response that is sent to the addScheduleClass endpoint.
export interface AddScheduleClassResponse {

}

// CreateDriveFolderRequest is the request that is sent to the createDriveFolder endpoint.
export interface CreateDriveFolderRequest {
    newFolderName: string;
    parentFolderID: string;
}

// CreateDriveFolderResponse is the response that is sent to the createDriveFolder endpoint.
export interface CreateDriveFolderResponse {
    folderInfo: DriveFolderInfo;
}

// GetDriveFolderRequest is the request that is sent to the getDriveFolder endpoint.
export interface GetDriveFolderRequest {
    folderID: string;
}

// GetDriveFolderResponse is the response that is sent to the getDriveFolder endpoint.
export interface GetDriveFolderResponse {
    folder: DriveFolder;
}

// AddDriveItemRequest is the request that is sent to the addDriveItem endpoint.
export interface AddDriveItemRequest {
    url: string;
    name: string;
    folderID: string;
}

// AddDriveItemResponse is the response that is sent to the addDriveItem endpoint.
export interface AddDriveItemResponse {
    item: DriveItem;
}

// GetCourseBookRequest is the request that is sent to the getCourseBook endpoint.
export interface GetCourseBookRequest {
    bookIDs: string[];
}

// GetCourseBookResponse is the response that is sent to the getCourseBook endpoint.
export interface GetCourseBookResponse {
    books: CourseBook[];
}

// GetBooksByCourseRequest is the request that is sent to the getBooksByCourse endpoint.
export interface GetBooksByCourseRequest {
    courseID: string;
}

// GetBooksByCourseResponse is the response that is sent to the getBooksByCourse endpoint.
export interface GetBooksByCourseResponse {
    books: CourseBook[];
}

// CreateBookRequest is the request that is sent to the createBook endpoint.
export interface CreateBookRequest {
    title: string;
    courseID: string;
    parentID?: string;
    content?: any;
}

// CreateBookResponse is the response that is sent to the createBook endpoint.
export interface CreateBookResponse {
    book: CourseBook;
}

// UpdateBookRequest is the request that is sent to the updateBook endpoint.
export interface UpdateBookRequest {
    id: string;
    title: string;
    content?: any;
}

// UpdateBookResponse is the response that is sent to the updateBook endpoint.
export interface UpdateBookResponse {
    book: CourseBook;
}

// DeleteBookRequest is the request that is sent to the deleteBook endpoint.
export interface DeleteBookRequest {
    id: string;
}

// DeleteBookResponse is the response that is sent to the deleteBook endpoint.
export interface DeleteBookResponse {

}


//////////////////////////////
// API Errors
//////////////////////////////

export class APIError extends Error {
    public code?: string;
    constructor(message: string, code?: string) {
        super(message);
        this.code = code;
    }
}

// eslint-disable-next-line
export const isAPIError = (e: any): e is APIError => {
    // eslint-disable-next-line
    return e instanceof APIError || !!e._rpc_error;
}

// ping is the endpoint handler for the ping endpoint.
// It wraps around the function at @/handlers/ping.
app.post('/api/ping', async (req, res) => {
    const request: PingRequest = req.body;
    try {
        const ctx = { req, res };
        const response: PingResponse = await ping(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request ping with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// checkEmail is the endpoint handler for the checkEmail endpoint.
// It wraps around the function at @/handlers/checkEmail.
app.post('/api/checkEmail', async (req, res) => {
    const request: CheckEmailRequest = req.body;
    try {
        const ctx = { req, res };
        const response: CheckEmailResponse = await checkEmail(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request checkEmail with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// register is the endpoint handler for the register endpoint.
// It wraps around the function at @/handlers/register.
app.post('/api/register', async (req, res) => {
    const request: RegisterRequest = req.body;
    try {
        const ctx = { req, res };
        const response: RegisterResponse = await register(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request register with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// verifyEmail is the endpoint handler for the verifyEmail endpoint.
// It wraps around the function at @/handlers/verifyEmail.
app.post('/api/verifyEmail', async (req, res) => {
    const request: VerifyEmailRequest = req.body;
    try {
        const ctx = { req, res };
        const response: VerifyEmailResponse = await verifyEmail(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request verifyEmail with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// login is the endpoint handler for the login endpoint.
// It wraps around the function at @/handlers/login.
app.post('/api/login', async (req, res) => {
    const request: LoginRequest = req.body;
    try {
        const ctx = { req, res };
        const response: LoginResponse = await login(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request login with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// verifyForgotPassword is the endpoint handler for the verifyForgotPassword endpoint.
// It wraps around the function at @/handlers/verifyForgotPassword.
app.post('/api/verifyForgotPassword', async (req, res) => {
    const request: VerifyForgotPasswordRequest = req.body;
    try {
        const ctx = { req, res };
        const response: VerifyForgotPasswordResponse = await verifyForgotPassword(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request verifyForgotPassword with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// forgotPassword is the endpoint handler for the forgotPassword endpoint.
// It wraps around the function at @/handlers/forgotPassword.
app.post('/api/forgotPassword', async (req, res) => {
    const request: ForgotPasswordRequest = req.body;
    try {
        const ctx = { req, res };
        const response: ForgotPasswordResponse = await forgotPassword(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request forgotPassword with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// getFeatured is the endpoint handler for the getFeatured endpoint.
// It wraps around the function at @/handlers/getFeatured.
app.post('/api/getFeatured', async (req, res) => {
    const request: GetFeaturedRequest = req.body;
    try {
        const ctx = { req, res };
        const response: GetFeaturedResponse = await getFeatured(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request getFeatured with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// getUserInfo is the endpoint handler for the getUserInfo endpoint.
// It wraps around the function at @/handlers/getUserInfo.
app.post('/api/getUserInfo', async (req, res) => {
    const request: GetUserInfoRequest = req.body;
    try {
        const ctx = { req, res };
        const response: GetUserInfoResponse = await getUserInfo(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request getUserInfo with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// getUserInfoByID is the endpoint handler for the getUserInfoByID endpoint.
// It wraps around the function at @/handlers/getUserInfoByID.
app.post('/api/getUserInfoByID', async (req, res) => {
    const request: GetUserInfoByIDRequest = req.body;
    try {
        const ctx = { req, res };
        const response: GetUserInfoByIDResponse = await getUserInfoByID(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request getUserInfoByID with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// getUserInfoByIDs is the endpoint handler for the getUserInfoByIDs endpoint.
// It wraps around the function at @/handlers/getUserInfoByIDs.
app.post('/api/getUserInfoByIDs', async (req, res) => {
    const request: GetUserInfoByIDsRequest = req.body;
    try {
        const ctx = { req, res };
        const response: GetUserInfoByIDsResponse = await getUserInfoByIDs(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request getUserInfoByIDs with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// setUserProfile is the endpoint handler for the setUserProfile endpoint.
// It wraps around the function at @/handlers/setUserProfile.
app.post('/api/setUserProfile', async (req, res) => {
    const request: SetUserProfileRequest = req.body;
    try {
        const ctx = { req, res };
        const response: SetUserProfileResponse = await setUserProfile(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request setUserProfile with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// resetPassword is the endpoint handler for the resetPassword endpoint.
// It wraps around the function at @/handlers/resetPassword.
app.post('/api/resetPassword', async (req, res) => {
    const request: ResetPasswordRequest = req.body;
    try {
        const ctx = { req, res };
        const response: ResetPasswordResponse = await resetPassword(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request resetPassword with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// createAssessment is the endpoint handler for the createAssessment endpoint.
// It wraps around the function at @/handlers/createAssessment.
app.post('/api/createAssessment', async (req, res) => {
    const request: CreateAssessmentRequest = req.body;
    try {
        const ctx = { req, res };
        const response: CreateAssessmentResponse = await createAssessment(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request createAssessment with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// submitAnswers is the endpoint handler for the submitAnswers endpoint.
// It wraps around the function at @/handlers/submitAnswers.
app.post('/api/submitAnswers', async (req, res) => {
    const request: SubmitAnswersRequest = req.body;
    try {
        const ctx = { req, res };
        const response: SubmitAnswersResponse = await submitAnswers(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request submitAnswers with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// submitAssignment is the endpoint handler for the submitAssignment endpoint.
// It wraps around the function at @/handlers/submitAssignment.
app.post('/api/submitAssignment', async (req, res) => {
    const request: SubmitAssignmentRequest = req.body;
    try {
        const ctx = { req, res };
        const response: SubmitAssignmentResponse = await submitAssignment(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request submitAssignment with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// manualGradeSubmission is the endpoint handler for the manualGradeSubmission endpoint.
// It wraps around the function at @/handlers/manualGradeSubmission.
app.post('/api/manualGradeSubmission', async (req, res) => {
    const request: ManualGradeSubmissionRequest = req.body;
    try {
        const ctx = { req, res };
        const response: ManualGradeSubmissionResponse = await manualGradeSubmission(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request manualGradeSubmission with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// assignmentGradeSubmission is the endpoint handler for the assignmentGradeSubmission endpoint.
// It wraps around the function at @/handlers/assignmentGradeSubmission.
app.post('/api/assignmentGradeSubmission', async (req, res) => {
    const request: AssignmentGradeSubmissionRequest = req.body;
    try {
        const ctx = { req, res };
        const response: AssignmentGradeSubmissionResponse = await assignmentGradeSubmission(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request assignmentGradeSubmission with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// fetchAssessmentDetailsTeacher is the endpoint handler for the fetchAssessmentDetailsTeacher endpoint.
// It wraps around the function at @/handlers/fetchAssessmentDetailsTeacher.
app.post('/api/fetchAssessmentDetailsTeacher', async (req, res) => {
    const request: FetchAssessmentDetailsTeacherRequest = req.body;
    try {
        const ctx = { req, res };
        const response: FetchAssessmentDetailsTeacherResponse = await fetchAssessmentDetailsTeacher(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request fetchAssessmentDetailsTeacher with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// fetchAssessmentDetailsStudent is the endpoint handler for the fetchAssessmentDetailsStudent endpoint.
// It wraps around the function at @/handlers/fetchAssessmentDetailsStudent.
app.post('/api/fetchAssessmentDetailsStudent', async (req, res) => {
    const request: FetchAssessmentDetailsStudentRequest = req.body;
    try {
        const ctx = { req, res };
        const response: FetchAssessmentDetailsStudentResponse = await fetchAssessmentDetailsStudent(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request fetchAssessmentDetailsStudent with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// fetchAssessmentSubmissions is the endpoint handler for the fetchAssessmentSubmissions endpoint.
// It wraps around the function at @/handlers/fetchAssessmentSubmissions.
app.post('/api/fetchAssessmentSubmissions', async (req, res) => {
    const request: FetchAssessmentSubmissionsRequest = req.body;
    try {
        const ctx = { req, res };
        const response: FetchAssessmentSubmissionsResponse = await fetchAssessmentSubmissions(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request fetchAssessmentSubmissions with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// fetchSubmission is the endpoint handler for the fetchSubmission endpoint.
// It wraps around the function at @/handlers/fetchSubmission.
app.post('/api/fetchSubmission', async (req, res) => {
    const request: FetchSubmissionRequest = req.body;
    try {
        const ctx = { req, res };
        const response: FetchSubmissionResponse = await fetchSubmission(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request fetchSubmission with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// fetchAssessments is the endpoint handler for the fetchAssessments endpoint.
// It wraps around the function at @/handlers/fetchAssessments.
app.post('/api/fetchAssessments', async (req, res) => {
    const request: FetchAssessmentsRequest = req.body;
    try {
        const ctx = { req, res };
        const response: FetchAssessmentsResponse = await fetchAssessments(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request fetchAssessments with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// fetchStudentSubmission is the endpoint handler for the fetchStudentSubmission endpoint.
// It wraps around the function at @/handlers/fetchStudentSubmission.
app.post('/api/fetchStudentSubmission', async (req, res) => {
    const request: FetchStudentSubmissionRequest = req.body;
    try {
        const ctx = { req, res };
        const response: FetchStudentSubmissionResponse = await fetchStudentSubmission(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request fetchStudentSubmission with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// fetchUserStats is the endpoint handler for the fetchUserStats endpoint.
// It wraps around the function at @/handlers/fetchUserStats.
app.post('/api/fetchUserStats', async (req, res) => {
    const request: FetchUserStatsRequest = req.body;
    try {
        const ctx = { req, res };
        const response: FetchUserStatsResponse = await fetchUserStats(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request fetchUserStats with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// fetchUserSevenDayActivity is the endpoint handler for the fetchUserSevenDayActivity endpoint.
// It wraps around the function at @/handlers/fetchUserSevenDayActivity.
app.post('/api/fetchUserSevenDayActivity', async (req, res) => {
    const request: FetchUserSevenDayActivityRequest = req.body;
    try {
        const ctx = { req, res };
        const response: FetchUserSevenDayActivityResponse = await fetchUserSevenDayActivity(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request fetchUserSevenDayActivity with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// createCourse is the endpoint handler for the createCourse endpoint.
// It wraps around the function at @/handlers/createCourse.
app.post('/api/createCourse', async (req, res) => {
    const request: CreateCourseRequest = req.body;
    try {
        const ctx = { req, res };
        const response: CreateCourseResponse = await createCourse(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request createCourse with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// updateCourse is the endpoint handler for the updateCourse endpoint.
// It wraps around the function at @/handlers/updateCourse.
app.post('/api/updateCourse', async (req, res) => {
    const request: UpdateCourseRequest = req.body;
    try {
        const ctx = { req, res };
        const response: UpdateCourseResponse = await updateCourse(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request updateCourse with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// getCourses is the endpoint handler for the getCourses endpoint.
// It wraps around the function at @/handlers/getCourses.
app.post('/api/getCourses', async (req, res) => {
    const request: GetCoursesRequest = req.body;
    try {
        const ctx = { req, res };
        const response: GetCoursesResponse = await getCourses(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request getCourses with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// getUserCourses is the endpoint handler for the getUserCourses endpoint.
// It wraps around the function at @/handlers/getUserCourses.
app.post('/api/getUserCourses', async (req, res) => {
    const request: GetUserCoursesRequest = req.body;
    try {
        const ctx = { req, res };
        const response: GetUserCoursesResponse = await getUserCourses(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request getUserCourses with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// createCourseInvitation is the endpoint handler for the createCourseInvitation endpoint.
// It wraps around the function at @/handlers/createCourseInvitation.
app.post('/api/createCourseInvitation', async (req, res) => {
    const request: CreateCourseInvitationRequest = req.body;
    try {
        const ctx = { req, res };
        const response: CreateCourseInvitationResponse = await createCourseInvitation(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request createCourseInvitation with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// joinCourse is the endpoint handler for the joinCourse endpoint.
// It wraps around the function at @/handlers/joinCourse.
app.post('/api/joinCourse', async (req, res) => {
    const request: JoinCourseRequest = req.body;
    try {
        const ctx = { req, res };
        const response: JoinCourseResponse = await joinCourse(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request joinCourse with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// leaveCourse is the endpoint handler for the leaveCourse endpoint.
// It wraps around the function at @/handlers/leaveCourse.
app.post('/api/leaveCourse', async (req, res) => {
    const request: LeaveCourseRequest = req.body;
    try {
        const ctx = { req, res };
        const response: LeaveCourseResponse = await leaveCourse(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request leaveCourse with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// removeMemberFromCourse is the endpoint handler for the removeMemberFromCourse endpoint.
// It wraps around the function at @/handlers/removeMemberFromCourse.
app.post('/api/removeMemberFromCourse', async (req, res) => {
    const request: RemoveMemberFromCourseRequest = req.body;
    try {
        const ctx = { req, res };
        const response: RemoveMemberFromCourseResponse = await removeMemberFromCourse(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request removeMemberFromCourse with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// getForumByCourseID is the endpoint handler for the getForumByCourseID endpoint.
// It wraps around the function at @/handlers/getForumByCourseID.
app.post('/api/getForumByCourseID', async (req, res) => {
    const request: GetForumByCourseIDRequest = req.body;
    try {
        const ctx = { req, res };
        const response: GetForumByCourseIDResponse = await getForumByCourseID(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request getForumByCourseID with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// getForumByID is the endpoint handler for the getForumByID endpoint.
// It wraps around the function at @/handlers/getForumByID.
app.post('/api/getForumByID', async (req, res) => {
    const request: GetForumByIDRequest = req.body;
    try {
        const ctx = { req, res };
        const response: GetForumByIDResponse = await getForumByID(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request getForumByID with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// getThreads is the endpoint handler for the getThreads endpoint.
// It wraps around the function at @/handlers/getThreads.
app.post('/api/getThreads', async (req, res) => {
    const request: GetThreadsRequest = req.body;
    try {
        const ctx = { req, res };
        const response: GetThreadsResponse = await getThreads(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request getThreads with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// upsertThread is the endpoint handler for the upsertThread endpoint.
// It wraps around the function at @/handlers/upsertThread.
app.post('/api/upsertThread', async (req, res) => {
    const request: UpsertThreadRequest = req.body;
    try {
        const ctx = { req, res };
        const response: UpsertThreadResponse = await upsertThread(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request upsertThread with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// deleteThread is the endpoint handler for the deleteThread endpoint.
// It wraps around the function at @/handlers/deleteThread.
app.post('/api/deleteThread', async (req, res) => {
    const request: DeleteThreadRequest = req.body;
    try {
        const ctx = { req, res };
        const response: DeleteThreadResponse = await deleteThread(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request deleteThread with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// upsertPost is the endpoint handler for the upsertPost endpoint.
// It wraps around the function at @/handlers/upsertPost.
app.post('/api/upsertPost', async (req, res) => {
    const request: UpsertPostRequest = req.body;
    try {
        const ctx = { req, res };
        const response: UpsertPostResponse = await upsertPost(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request upsertPost with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// deletePost is the endpoint handler for the deletePost endpoint.
// It wraps around the function at @/handlers/deletePost.
app.post('/api/deletePost', async (req, res) => {
    const request: DeletePostRequest = req.body;
    try {
        const ctx = { req, res };
        const response: DeletePostResponse = await deletePost(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request deletePost with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// getRoleInCourse is the endpoint handler for the getRoleInCourse endpoint.
// It wraps around the function at @/handlers/getRoleInCourse.
app.post('/api/getRoleInCourse', async (req, res) => {
    const request: GetRoleInCourseRequest = req.body;
    try {
        const ctx = { req, res };
        const response: GetRoleInCourseResponse = await getRoleInCourse(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request getRoleInCourse with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// getThreadAndPostStats is the endpoint handler for the getThreadAndPostStats endpoint.
// It wraps around the function at @/handlers/getThreadAndPostStats.
app.post('/api/getThreadAndPostStats', async (req, res) => {
    const request: GetThreadAndPostStatsRequest = req.body;
    try {
        const ctx = { req, res };
        const response: GetThreadAndPostStatsResponse = await getThreadAndPostStats(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request getThreadAndPostStats with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// toggleLikePost is the endpoint handler for the toggleLikePost endpoint.
// It wraps around the function at @/handlers/toggleLikePost.
app.post('/api/toggleLikePost', async (req, res) => {
    const request: ToggleLikePostRequest = req.body;
    try {
        const ctx = { req, res };
        const response: ToggleLikePostResponse = await toggleLikePost(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request toggleLikePost with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// incrementThreadView is the endpoint handler for the incrementThreadView endpoint.
// It wraps around the function at @/handlers/incrementThreadView.
app.post('/api/incrementThreadView', async (req, res) => {
    const request: IncrementThreadViewRequest = req.body;
    try {
        const ctx = { req, res };
        const response: IncrementThreadViewResponse = await incrementThreadView(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request incrementThreadView with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// getUserEvents is the endpoint handler for the getUserEvents endpoint.
// It wraps around the function at @/handlers/getUserEvents.
app.post('/api/getUserEvents', async (req, res) => {
    const request: GetUserEventsRequest = req.body;
    try {
        const ctx = { req, res };
        const response: GetUserEventsResponse = await getUserEvents(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request getUserEvents with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// getCourseEvents is the endpoint handler for the getCourseEvents endpoint.
// It wraps around the function at @/handlers/getCourseEvents.
app.post('/api/getCourseEvents', async (req, res) => {
    const request: GetCourseEventsRequest = req.body;
    try {
        const ctx = { req, res };
        const response: GetCourseEventsResponse = await getCourseEvents(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request getCourseEvents with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// getAnnouncements is the endpoint handler for the getAnnouncements endpoint.
// It wraps around the function at @/handlers/getAnnouncements.
app.post('/api/getAnnouncements', async (req, res) => {
    const request: GetAnnouncementsRequest = req.body;
    try {
        const ctx = { req, res };
        const response: GetAnnouncementsResponse = await getAnnouncements(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request getAnnouncements with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// getCourseMembers is the endpoint handler for the getCourseMembers endpoint.
// It wraps around the function at @/handlers/getCourseMembers.
app.post('/api/getCourseMembers', async (req, res) => {
    const request: GetCourseMembersRequest = req.body;
    try {
        const ctx = { req, res };
        const response: GetCourseMembersResponse = await getCourseMembers(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request getCourseMembers with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// addScheduleClass is the endpoint handler for the addScheduleClass endpoint.
// It wraps around the function at @/handlers/addScheduleClass.
app.post('/api/addScheduleClass', async (req, res) => {
    const request: AddScheduleClassRequest = req.body;
    try {
        const ctx = { req, res };
        const response: AddScheduleClassResponse = await addScheduleClass(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request addScheduleClass with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// createDriveFolder is the endpoint handler for the createDriveFolder endpoint.
// It wraps around the function at @/handlers/createDriveFolder.
app.post('/api/createDriveFolder', async (req, res) => {
    const request: CreateDriveFolderRequest = req.body;
    try {
        const ctx = { req, res };
        const response: CreateDriveFolderResponse = await createDriveFolder(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request createDriveFolder with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// getDriveFolder is the endpoint handler for the getDriveFolder endpoint.
// It wraps around the function at @/handlers/getDriveFolder.
app.post('/api/getDriveFolder', async (req, res) => {
    const request: GetDriveFolderRequest = req.body;
    try {
        const ctx = { req, res };
        const response: GetDriveFolderResponse = await getDriveFolder(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request getDriveFolder with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// addDriveItem is the endpoint handler for the addDriveItem endpoint.
// It wraps around the function at @/handlers/addDriveItem.
app.post('/api/addDriveItem', async (req, res) => {
    const request: AddDriveItemRequest = req.body;
    try {
        const ctx = { req, res };
        const response: AddDriveItemResponse = await addDriveItem(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request addDriveItem with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// getCourseBook is the endpoint handler for the getCourseBook endpoint.
// It wraps around the function at @/handlers/getCourseBook.
app.post('/api/getCourseBook', async (req, res) => {
    const request: GetCourseBookRequest = req.body;
    try {
        const ctx = { req, res };
        const response: GetCourseBookResponse = await getCourseBook(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request getCourseBook with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// getBooksByCourse is the endpoint handler for the getBooksByCourse endpoint.
// It wraps around the function at @/handlers/getBooksByCourse.
app.post('/api/getBooksByCourse', async (req, res) => {
    const request: GetBooksByCourseRequest = req.body;
    try {
        const ctx = { req, res };
        const response: GetBooksByCourseResponse = await getBooksByCourse(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request getBooksByCourse with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// createBook is the endpoint handler for the createBook endpoint.
// It wraps around the function at @/handlers/createBook.
app.post('/api/createBook', async (req, res) => {
    const request: CreateBookRequest = req.body;
    try {
        const ctx = { req, res };
        const response: CreateBookResponse = await createBook(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request createBook with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// updateBook is the endpoint handler for the updateBook endpoint.
// It wraps around the function at @/handlers/updateBook.
app.post('/api/updateBook', async (req, res) => {
    const request: UpdateBookRequest = req.body;
    try {
        const ctx = { req, res };
        const response: UpdateBookResponse = await updateBook(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request updateBook with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});

// deleteBook is the endpoint handler for the deleteBook endpoint.
// It wraps around the function at @/handlers/deleteBook.
app.post('/api/deleteBook', async (req, res) => {
    const request: DeleteBookRequest = req.body;
    try {
        const ctx = { req, res };
        const response: DeleteBookResponse = await deleteBook(ctx, request);
        res.json(response);
    } catch (e) {
        if (e instanceof APIError) {
            res.status(400);
            res.json({ message: e.message, code: e.code, _rpc_error: true });
            return;
        } else {
            res.status(500);
            res.json({ message: "Internal server error", _rpc_error: true });
            console.error(`Error occurred while handling request deleteBook with arguments ${ JSON.stringify(request) }: `, e);
            return;
        }
    }
});
