// Generated by the RPC compiler.
// DO NOT EDIT.

//////////////////////////////
// Types defined in the types file
//////////////////////////////

export interface User {
    email: string;
    firstName: string;
    lastName: string;
    avatar?: string;
    gender?: string;
    title?: string;
    bio?: string;
}

export type Token = string;

export interface Error {
    message: string;
}

export interface Featured {
    background: string;
    title: string;
    description: string;
}

export interface Assessment {
    id: string;
    title: string;
    description?: string;
    courseId: string;
    startDate?: string;
    dueDate?: string;
    type: string;
    questions: Question[];
    submissions: Submission[];
}

export interface Question {
    id: string;
    assessmentId: string;
    title: string;
    type: string;
    options?: any;
    answer?: string;
    points: number;
}

export interface NewQuestion {
    title: string;
    type: string;
    options?: any;
    answer?: string;
    points: number;
}

export interface Submission {
    id: string;
    assessmentId: string;
    studentId: string;
    submittedAt?: string;
    fileUrl?: string;
    answers?: any;
    grade?: number;
}

export interface Course {
    id: string;
    name: string;
    code?: string;
    description?: string;
    imageURL?: string;
    createdBy: User;
    createdAt: number;
}

export interface UserStats {
    coursesInProgress: number;
    coursesCompleted: number;
    tasksFinished: number;
}

export interface UserSevenDayActivity {
    activities: number[];
}

export interface CourseMembership {
    courseId: string;
    role: string;
}

export interface Forum {
    id: string;
    courseID: string;
    name: string;
    createdAt: number;
    createdBy?: User;
}

export interface Thread {
    id: string;
    forumID: string;
    createdAt: number;
    updatedAt: number;
    createdBy?: User;
    deletedAt?: number;
    title: string;
    posts: Post[];
}

export interface ThreadStats {
    threadID: string;
    views: number;
}

export interface PostStats {
    postID: string;
    likes: number;
    liked: boolean;
}

export interface Post {
    id: string;
    threadID: string;
    createdAt: number;
    updatedAt: number;
    createdBy?: User;
    deletedAt?: number;
    content: any;
}

//////////////////////////////
// Endpoint Requests/Responses
//////////////////////////////


// PingRequest is the request that is sent to the ping endpoint.
export interface PingRequest {
    seq: number;
}

// PingResponse is the response that is sent to the ping endpoint.
export interface PingResponse {
    seq: number;
}

// CheckEmailRequest is the request that is sent to the checkEmail endpoint.
export interface CheckEmailRequest {
    email: string;
}

// CheckEmailResponse is the response that is sent to the checkEmail endpoint.
export interface CheckEmailResponse {
    taken: boolean;
}

// RegisterRequest is the request that is sent to the register endpoint.
export interface RegisterRequest {
    email: string;
    password: string;
    firstName: string;
    lastName: string;
    otp: string;
}

// RegisterResponse is the response that is sent to the register endpoint.
export interface RegisterResponse {

}

// VerifyEmailRequest is the request that is sent to the verifyEmail endpoint.
export interface VerifyEmailRequest {
    email: string;
}

// VerifyEmailResponse is the response that is sent to the verifyEmail endpoint.
export interface VerifyEmailResponse {

}

// LoginRequest is the request that is sent to the login endpoint.
export interface LoginRequest {
    email: string;
    password: string;
}

// LoginResponse is the response that is sent to the login endpoint.
export interface LoginResponse {
    user: User;
    token: Token;
}

// VerifyForgotPasswordRequest is the request that is sent to the verifyForgotPassword endpoint.
export interface VerifyForgotPasswordRequest {
    email: string;
}

// VerifyForgotPasswordResponse is the response that is sent to the verifyForgotPassword endpoint.
export interface VerifyForgotPasswordResponse {

}

// ForgotPasswordRequest is the request that is sent to the forgotPassword endpoint.
export interface ForgotPasswordRequest {
    email: string;
    newPassword: string;
    otp: string;
}

// ForgotPasswordResponse is the response that is sent to the forgotPassword endpoint.
export interface ForgotPasswordResponse {

}

// GetFeaturedRequest is the request that is sent to the getFeatured endpoint.
export interface GetFeaturedRequest {

}

// GetFeaturedResponse is the response that is sent to the getFeatured endpoint.
export interface GetFeaturedResponse {
    featured: Featured;
}

// GetUserInfoRequest is the request that is sent to the getUserInfo endpoint.
export interface GetUserInfoRequest {
    email?: string;
}

// GetUserInfoResponse is the response that is sent to the getUserInfo endpoint.
export interface GetUserInfoResponse {
    user: User;
}

// SetUserProfileRequest is the request that is sent to the setUserProfile endpoint.
export interface SetUserProfileRequest {
    user: User;
}

// SetUserProfileResponse is the response that is sent to the setUserProfile endpoint.
export interface SetUserProfileResponse {

}

// CreateAssessmentRequest is the request that is sent to the createAssessment endpoint.
export interface CreateAssessmentRequest {
    title: string;
    description?: string;
    courseId: string;
    startDate?: string;
    dueDate?: string;
    type: string;
    questions?: NewQuestion[];
}

// CreateAssessmentResponse is the response that is sent to the createAssessment endpoint.
export interface CreateAssessmentResponse {
    assessment: Assessment;
}

// SubmitAnswersRequest is the request that is sent to the submitAnswers endpoint.
export interface SubmitAnswersRequest {
    assessmentId: string;
    studentId: string;
    answers: string;
}

// SubmitAnswersResponse is the response that is sent to the submitAnswers endpoint.
export interface SubmitAnswersResponse {
    submission: Submission;
}

// SubmitAssignmentRequest is the request that is sent to the submitAssignment endpoint.
export interface SubmitAssignmentRequest {
    assessmentId: string;
    studentId: string;
    fileUrl: string;
}

// SubmitAssignmentResponse is the response that is sent to the submitAssignment endpoint.
export interface SubmitAssignmentResponse {
    submission: Submission;
}

// FetchAssessmentDetailsRequest is the request that is sent to the fetchAssessmentDetails endpoint.
export interface FetchAssessmentDetailsRequest {
    assessmentId: string;
}

// FetchAssessmentDetailsResponse is the response that is sent to the fetchAssessmentDetails endpoint.
export interface FetchAssessmentDetailsResponse {
    assessment: Assessment;
}

// FetchUserStatsRequest is the request that is sent to the fetchUserStats endpoint.
export interface FetchUserStatsRequest {

}

// FetchUserStatsResponse is the response that is sent to the fetchUserStats endpoint.
export interface FetchUserStatsResponse {
    stats: UserStats;
}

// FetchUserSevenDayActivityRequest is the request that is sent to the fetchUserSevenDayActivity endpoint.
export interface FetchUserSevenDayActivityRequest {

}

// FetchUserSevenDayActivityResponse is the response that is sent to the fetchUserSevenDayActivity endpoint.
export interface FetchUserSevenDayActivityResponse {
    activity: UserSevenDayActivity;
}

// CreateCourseRequest is the request that is sent to the createCourse endpoint.
export interface CreateCourseRequest {
    name: string;
    description: string;
    code?: string;
    imageURL?: string;
}

// CreateCourseResponse is the response that is sent to the createCourse endpoint.
export interface CreateCourseResponse {
    course: Course;
}

// GetCoursesRequest is the request that is sent to the getCourses endpoint.
export interface GetCoursesRequest {
    courseIds: string[];
}

// GetCoursesResponse is the response that is sent to the getCourses endpoint.
export interface GetCoursesResponse {
    courses: Course[];
}

// GetUserCoursesRequest is the request that is sent to the getUserCourses endpoint.
export interface GetUserCoursesRequest {

}

// GetUserCoursesResponse is the response that is sent to the getUserCourses endpoint.
export interface GetUserCoursesResponse {
    courses: Course[];
    memberships: CourseMembership[];
}

// CreateCourseInvitationRequest is the request that is sent to the createCourseInvitation endpoint.
export interface CreateCourseInvitationRequest {
    courseId: string;
    role: string;
}

// CreateCourseInvitationResponse is the response that is sent to the createCourseInvitation endpoint.
export interface CreateCourseInvitationResponse {
    code: string;
}

// JoinCourseRequest is the request that is sent to the joinCourse endpoint.
export interface JoinCourseRequest {
    code: string;
}

// JoinCourseResponse is the response that is sent to the joinCourse endpoint.
export interface JoinCourseResponse {
    course: Course;
}

// LeaveCourseRequest is the request that is sent to the leaveCourse endpoint.
export interface LeaveCourseRequest {
    courseId: string;
}

// LeaveCourseResponse is the response that is sent to the leaveCourse endpoint.
export interface LeaveCourseResponse {

}

// GetForumByCourseIDRequest is the request that is sent to the getForumByCourseID endpoint.
export interface GetForumByCourseIDRequest {
    courseID: string;
}

// GetForumByCourseIDResponse is the response that is sent to the getForumByCourseID endpoint.
export interface GetForumByCourseIDResponse {
    forum: Forum;
}

// GetForumByIDRequest is the request that is sent to the getForumByID endpoint.
export interface GetForumByIDRequest {
    id: string;
}

// GetForumByIDResponse is the response that is sent to the getForumByID endpoint.
export interface GetForumByIDResponse {
    forum: Forum;
}

// GetThreadsRequest is the request that is sent to the getThreads endpoint.
export interface GetThreadsRequest {
    forumID: string;
}

// GetThreadsResponse is the response that is sent to the getThreads endpoint.
export interface GetThreadsResponse {
    threads: Thread[];
}

// UpsertThreadRequest is the request that is sent to the upsertThread endpoint.
export interface UpsertThreadRequest {
    thread: Thread;
}

// UpsertThreadResponse is the response that is sent to the upsertThread endpoint.
export interface UpsertThreadResponse {
    thread: Thread;
}

// DeleteThreadRequest is the request that is sent to the deleteThread endpoint.
export interface DeleteThreadRequest {
    threadID: string;
}

// DeleteThreadResponse is the response that is sent to the deleteThread endpoint.
export interface DeleteThreadResponse {

}

// UpsertPostRequest is the request that is sent to the upsertPost endpoint.
export interface UpsertPostRequest {
    post: Post;
}

// UpsertPostResponse is the response that is sent to the upsertPost endpoint.
export interface UpsertPostResponse {
    post: Post;
}

// DeletePostRequest is the request that is sent to the deletePost endpoint.
export interface DeletePostRequest {
    postID: string;
}

// DeletePostResponse is the response that is sent to the deletePost endpoint.
export interface DeletePostResponse {

}

// GetRoleInCourseRequest is the request that is sent to the getRoleInCourse endpoint.
export interface GetRoleInCourseRequest {
    courseId: string;
}

// GetRoleInCourseResponse is the response that is sent to the getRoleInCourse endpoint.
export interface GetRoleInCourseResponse {
    role: string | null;
}

// GetThreadAndPostStatsRequest is the request that is sent to the getThreadAndPostStats endpoint.
export interface GetThreadAndPostStatsRequest {
    threadID: string;
}

// GetThreadAndPostStatsResponse is the response that is sent to the getThreadAndPostStats endpoint.
export interface GetThreadAndPostStatsResponse {
    thread: ThreadStats;
    posts: Record<string, PostStats>;
}

// ToggleLikePostRequest is the request that is sent to the toggleLikePost endpoint.
export interface ToggleLikePostRequest {
    postID: string;
}

// ToggleLikePostResponse is the response that is sent to the toggleLikePost endpoint.
export interface ToggleLikePostResponse {

}

// IncrementThreadViewRequest is the request that is sent to the incrementThreadView endpoint.
export interface IncrementThreadViewRequest {
    threadID: string;
}

// IncrementThreadViewResponse is the response that is sent to the incrementThreadView endpoint.
export interface IncrementThreadViewResponse {

}


//////////////////////////////
// API Errors
//////////////////////////////

export class APIError extends Error {
    public code?: string;
    constructor(message: string, code?: string) {
        super(message);
        this.code = code;
    }
}

// eslint-disable-next-line
export const isAPIError = (e: any): e is APIError => {
    // eslint-disable-next-line
    return e instanceof APIError || !!e._rpc_error;
}

export class BrainwavesClient {
    base_url: string;
    constructor(base_url: string) {
        this.base_url = base_url;
    }
    async ping(request: PingRequest): Promise<PingResponse> {
        const response = await fetch(`${this.base_url}/ping`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as PingResponse;
    }



    async checkEmail(request: CheckEmailRequest): Promise<CheckEmailResponse> {
        const response = await fetch(`${this.base_url}/checkEmail`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as CheckEmailResponse;
    }



    async register(request: RegisterRequest): Promise<RegisterResponse> {
        const response = await fetch(`${this.base_url}/register`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as RegisterResponse;
    }



    async verifyEmail(request: VerifyEmailRequest): Promise<VerifyEmailResponse> {
        const response = await fetch(`${this.base_url}/verifyEmail`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as VerifyEmailResponse;
    }



    async login(request: LoginRequest): Promise<LoginResponse> {
        const response = await fetch(`${this.base_url}/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as LoginResponse;
    }



    async verifyForgotPassword(request: VerifyForgotPasswordRequest): Promise<VerifyForgotPasswordResponse> {
        const response = await fetch(`${this.base_url}/verifyForgotPassword`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as VerifyForgotPasswordResponse;
    }



    async forgotPassword(request: ForgotPasswordRequest): Promise<ForgotPasswordResponse> {
        const response = await fetch(`${this.base_url}/forgotPassword`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as ForgotPasswordResponse;
    }



    async getFeatured(request: GetFeaturedRequest): Promise<GetFeaturedResponse> {
        const response = await fetch(`${this.base_url}/getFeatured`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as GetFeaturedResponse;
    }



    async getUserInfo(request: GetUserInfoRequest): Promise<GetUserInfoResponse> {
        const response = await fetch(`${this.base_url}/getUserInfo`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as GetUserInfoResponse;
    }



    async setUserProfile(request: SetUserProfileRequest): Promise<SetUserProfileResponse> {
        const response = await fetch(`${this.base_url}/setUserProfile`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as SetUserProfileResponse;
    }



    async createAssessment(request: CreateAssessmentRequest): Promise<CreateAssessmentResponse> {
        const response = await fetch(`${this.base_url}/createAssessment`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as CreateAssessmentResponse;
    }



    async submitAnswers(request: SubmitAnswersRequest): Promise<SubmitAnswersResponse> {
        const response = await fetch(`${this.base_url}/submitAnswers`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as SubmitAnswersResponse;
    }



    async submitAssignment(request: SubmitAssignmentRequest): Promise<SubmitAssignmentResponse> {
        const response = await fetch(`${this.base_url}/submitAssignment`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as SubmitAssignmentResponse;
    }



    async fetchAssessmentDetails(request: FetchAssessmentDetailsRequest): Promise<FetchAssessmentDetailsResponse> {
        const response = await fetch(`${this.base_url}/fetchAssessmentDetails`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as FetchAssessmentDetailsResponse;
    }



    async fetchUserStats(request: FetchUserStatsRequest): Promise<FetchUserStatsResponse> {
        const response = await fetch(`${this.base_url}/fetchUserStats`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as FetchUserStatsResponse;
    }



    async fetchUserSevenDayActivity(request: FetchUserSevenDayActivityRequest): Promise<FetchUserSevenDayActivityResponse> {
        const response = await fetch(`${this.base_url}/fetchUserSevenDayActivity`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as FetchUserSevenDayActivityResponse;
    }



    async createCourse(request: CreateCourseRequest): Promise<CreateCourseResponse> {
        const response = await fetch(`${this.base_url}/createCourse`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as CreateCourseResponse;
    }



    async getCourses(request: GetCoursesRequest): Promise<GetCoursesResponse> {
        const response = await fetch(`${this.base_url}/getCourses`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as GetCoursesResponse;
    }



    async getUserCourses(request: GetUserCoursesRequest): Promise<GetUserCoursesResponse> {
        const response = await fetch(`${this.base_url}/getUserCourses`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as GetUserCoursesResponse;
    }



    async createCourseInvitation(request: CreateCourseInvitationRequest): Promise<CreateCourseInvitationResponse> {
        const response = await fetch(`${this.base_url}/createCourseInvitation`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as CreateCourseInvitationResponse;
    }



    async joinCourse(request: JoinCourseRequest): Promise<JoinCourseResponse> {
        const response = await fetch(`${this.base_url}/joinCourse`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as JoinCourseResponse;
    }



    async leaveCourse(request: LeaveCourseRequest): Promise<LeaveCourseResponse> {
        const response = await fetch(`${this.base_url}/leaveCourse`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as LeaveCourseResponse;
    }



    async getForumByCourseID(request: GetForumByCourseIDRequest): Promise<GetForumByCourseIDResponse> {
        const response = await fetch(`${this.base_url}/getForumByCourseID`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as GetForumByCourseIDResponse;
    }



    async getForumByID(request: GetForumByIDRequest): Promise<GetForumByIDResponse> {
        const response = await fetch(`${this.base_url}/getForumByID`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as GetForumByIDResponse;
    }



    async getThreads(request: GetThreadsRequest): Promise<GetThreadsResponse> {
        const response = await fetch(`${this.base_url}/getThreads`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as GetThreadsResponse;
    }



    async upsertThread(request: UpsertThreadRequest): Promise<UpsertThreadResponse> {
        const response = await fetch(`${this.base_url}/upsertThread`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as UpsertThreadResponse;
    }



    async deleteThread(request: DeleteThreadRequest): Promise<DeleteThreadResponse> {
        const response = await fetch(`${this.base_url}/deleteThread`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as DeleteThreadResponse;
    }



    async upsertPost(request: UpsertPostRequest): Promise<UpsertPostResponse> {
        const response = await fetch(`${this.base_url}/upsertPost`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as UpsertPostResponse;
    }



    async deletePost(request: DeletePostRequest): Promise<DeletePostResponse> {
        const response = await fetch(`${this.base_url}/deletePost`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as DeletePostResponse;
    }



    async getRoleInCourse(request: GetRoleInCourseRequest): Promise<GetRoleInCourseResponse> {
        const response = await fetch(`${this.base_url}/getRoleInCourse`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as GetRoleInCourseResponse;
    }



    async getThreadAndPostStats(request: GetThreadAndPostStatsRequest): Promise<GetThreadAndPostStatsResponse> {
        const response = await fetch(`${this.base_url}/getThreadAndPostStats`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as GetThreadAndPostStatsResponse;
    }



    async toggleLikePost(request: ToggleLikePostRequest): Promise<ToggleLikePostResponse> {
        const response = await fetch(`${this.base_url}/toggleLikePost`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as ToggleLikePostResponse;
    }



    async incrementThreadView(request: IncrementThreadViewRequest): Promise<IncrementThreadViewResponse> {
        const response = await fetch(`${this.base_url}/incrementThreadView`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(request)
        });

        const json = await response.json();

        if (!response.ok) {
            if (isAPIError(json)) {
                switch (response.status) {
                    case 400:
                        throw new APIError(json.message, json.code);
                    case 500:
                        throw new Error(json.message);
                }
            }

            throw new Error("RPC Request Failed.");
        }

        return json as IncrementThreadViewResponse;
    }
}

export const brainwavesAPI = new BrainwavesClient('/api');
